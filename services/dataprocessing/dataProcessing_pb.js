// source: services/dataprocessing/dataProcessing.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.dataprocessing.AccountDailySnapshot', null, global);
goog.exportSymbol('proto.dataprocessing.AccountMonthlySnapshot', null, global);
goog.exportSymbol('proto.dataprocessing.Empty', null, global);
goog.exportSymbol('proto.dataprocessing.GetAccountDailySnapshotsRequest', null, global);
goog.exportSymbol('proto.dataprocessing.GetAccountDailySnapshotsResponse', null, global);
goog.exportSymbol('proto.dataprocessing.GetAccountMonthlySnapshotsRequest', null, global);
goog.exportSymbol('proto.dataprocessing.GetAccountMonthlySnapshotsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataprocessing.AccountDailySnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataprocessing.AccountDailySnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataprocessing.AccountDailySnapshot.displayName = 'proto.dataprocessing.AccountDailySnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataprocessing.AccountMonthlySnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataprocessing.AccountMonthlySnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataprocessing.AccountMonthlySnapshot.displayName = 'proto.dataprocessing.AccountMonthlySnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataprocessing.GetAccountDailySnapshotsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataprocessing.GetAccountDailySnapshotsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataprocessing.GetAccountDailySnapshotsRequest.displayName = 'proto.dataprocessing.GetAccountDailySnapshotsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataprocessing.GetAccountDailySnapshotsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dataprocessing.GetAccountDailySnapshotsResponse.repeatedFields_, null);
};
goog.inherits(proto.dataprocessing.GetAccountDailySnapshotsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataprocessing.GetAccountDailySnapshotsResponse.displayName = 'proto.dataprocessing.GetAccountDailySnapshotsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataprocessing.GetAccountMonthlySnapshotsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataprocessing.GetAccountMonthlySnapshotsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataprocessing.GetAccountMonthlySnapshotsRequest.displayName = 'proto.dataprocessing.GetAccountMonthlySnapshotsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataprocessing.GetAccountMonthlySnapshotsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dataprocessing.GetAccountMonthlySnapshotsResponse.repeatedFields_, null);
};
goog.inherits(proto.dataprocessing.GetAccountMonthlySnapshotsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataprocessing.GetAccountMonthlySnapshotsResponse.displayName = 'proto.dataprocessing.GetAccountMonthlySnapshotsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataprocessing.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataprocessing.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataprocessing.Empty.displayName = 'proto.dataprocessing.Empty';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataprocessing.AccountDailySnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.dataprocessing.AccountDailySnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataprocessing.AccountDailySnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.AccountDailySnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    date: jspb.Message.getFieldWithDefault(msg, 3, ""),
    startDayBalance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    endDayBalance: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    cashOut: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    cashIn: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataprocessing.AccountDailySnapshot}
 */
proto.dataprocessing.AccountDailySnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataprocessing.AccountDailySnapshot;
  return proto.dataprocessing.AccountDailySnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataprocessing.AccountDailySnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataprocessing.AccountDailySnapshot}
 */
proto.dataprocessing.AccountDailySnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setItemId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartDayBalance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndDayBalance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCashOut(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCashIn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataprocessing.AccountDailySnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataprocessing.AccountDailySnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataprocessing.AccountDailySnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.AccountDailySnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStartDayBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getEndDayBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCashOut();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getCashIn();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional int64 item_id = 1;
 * @return {number}
 */
proto.dataprocessing.AccountDailySnapshot.prototype.getItemId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.AccountDailySnapshot} returns this
 */
proto.dataprocessing.AccountDailySnapshot.prototype.setItemId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 account_id = 2;
 * @return {number}
 */
proto.dataprocessing.AccountDailySnapshot.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.AccountDailySnapshot} returns this
 */
proto.dataprocessing.AccountDailySnapshot.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string date = 3;
 * @return {string}
 */
proto.dataprocessing.AccountDailySnapshot.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataprocessing.AccountDailySnapshot} returns this
 */
proto.dataprocessing.AccountDailySnapshot.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double start_day_balance = 4;
 * @return {number}
 */
proto.dataprocessing.AccountDailySnapshot.prototype.getStartDayBalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.AccountDailySnapshot} returns this
 */
proto.dataprocessing.AccountDailySnapshot.prototype.setStartDayBalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double end_day_balance = 5;
 * @return {number}
 */
proto.dataprocessing.AccountDailySnapshot.prototype.getEndDayBalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.AccountDailySnapshot} returns this
 */
proto.dataprocessing.AccountDailySnapshot.prototype.setEndDayBalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double cash_out = 6;
 * @return {number}
 */
proto.dataprocessing.AccountDailySnapshot.prototype.getCashOut = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.AccountDailySnapshot} returns this
 */
proto.dataprocessing.AccountDailySnapshot.prototype.setCashOut = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double cash_in = 7;
 * @return {number}
 */
proto.dataprocessing.AccountDailySnapshot.prototype.getCashIn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.AccountDailySnapshot} returns this
 */
proto.dataprocessing.AccountDailySnapshot.prototype.setCashIn = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.dataprocessing.AccountMonthlySnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataprocessing.AccountMonthlySnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.AccountMonthlySnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    date: jspb.Message.getFieldWithDefault(msg, 3, ""),
    startMonthBalance: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    endMonthBalance: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    cashOut: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    cashIn: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataprocessing.AccountMonthlySnapshot}
 */
proto.dataprocessing.AccountMonthlySnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataprocessing.AccountMonthlySnapshot;
  return proto.dataprocessing.AccountMonthlySnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataprocessing.AccountMonthlySnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataprocessing.AccountMonthlySnapshot}
 */
proto.dataprocessing.AccountMonthlySnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setItemId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartMonthBalance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndMonthBalance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCashOut(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCashIn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataprocessing.AccountMonthlySnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataprocessing.AccountMonthlySnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.AccountMonthlySnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStartMonthBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getEndMonthBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCashOut();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getCashIn();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional int64 item_id = 1;
 * @return {number}
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.getItemId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.AccountMonthlySnapshot} returns this
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.setItemId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 account_id = 2;
 * @return {number}
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.AccountMonthlySnapshot} returns this
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string date = 3;
 * @return {string}
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataprocessing.AccountMonthlySnapshot} returns this
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double start_month_balance = 4;
 * @return {number}
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.getStartMonthBalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.AccountMonthlySnapshot} returns this
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.setStartMonthBalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double end_month_balance = 5;
 * @return {number}
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.getEndMonthBalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.AccountMonthlySnapshot} returns this
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.setEndMonthBalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double cash_out = 6;
 * @return {number}
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.getCashOut = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.AccountMonthlySnapshot} returns this
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.setCashOut = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double cash_in = 7;
 * @return {number}
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.getCashIn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.AccountMonthlySnapshot} returns this
 */
proto.dataprocessing.AccountMonthlySnapshot.prototype.setCashIn = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataprocessing.GetAccountDailySnapshotsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dataprocessing.GetAccountDailySnapshotsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataprocessing.GetAccountDailySnapshotsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.GetAccountDailySnapshotsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataprocessing.GetAccountDailySnapshotsRequest}
 */
proto.dataprocessing.GetAccountDailySnapshotsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataprocessing.GetAccountDailySnapshotsRequest;
  return proto.dataprocessing.GetAccountDailySnapshotsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataprocessing.GetAccountDailySnapshotsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataprocessing.GetAccountDailySnapshotsRequest}
 */
proto.dataprocessing.GetAccountDailySnapshotsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setItemId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataprocessing.GetAccountDailySnapshotsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataprocessing.GetAccountDailySnapshotsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataprocessing.GetAccountDailySnapshotsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.GetAccountDailySnapshotsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 item_id = 1;
 * @return {number}
 */
proto.dataprocessing.GetAccountDailySnapshotsRequest.prototype.getItemId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.GetAccountDailySnapshotsRequest} returns this
 */
proto.dataprocessing.GetAccountDailySnapshotsRequest.prototype.setItemId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 account_id = 2;
 * @return {number}
 */
proto.dataprocessing.GetAccountDailySnapshotsRequest.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.GetAccountDailySnapshotsRequest} returns this
 */
proto.dataprocessing.GetAccountDailySnapshotsRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dataprocessing.GetAccountDailySnapshotsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataprocessing.GetAccountDailySnapshotsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dataprocessing.GetAccountDailySnapshotsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataprocessing.GetAccountDailySnapshotsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.GetAccountDailySnapshotsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountDailySnapshotsList: jspb.Message.toObjectList(msg.getAccountDailySnapshotsList(),
    proto.dataprocessing.AccountDailySnapshot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataprocessing.GetAccountDailySnapshotsResponse}
 */
proto.dataprocessing.GetAccountDailySnapshotsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataprocessing.GetAccountDailySnapshotsResponse;
  return proto.dataprocessing.GetAccountDailySnapshotsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataprocessing.GetAccountDailySnapshotsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataprocessing.GetAccountDailySnapshotsResponse}
 */
proto.dataprocessing.GetAccountDailySnapshotsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dataprocessing.AccountDailySnapshot;
      reader.readMessage(value,proto.dataprocessing.AccountDailySnapshot.deserializeBinaryFromReader);
      msg.addAccountDailySnapshots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataprocessing.GetAccountDailySnapshotsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataprocessing.GetAccountDailySnapshotsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataprocessing.GetAccountDailySnapshotsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.GetAccountDailySnapshotsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountDailySnapshotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dataprocessing.AccountDailySnapshot.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccountDailySnapshot account_daily_snapshots = 1;
 * @return {!Array<!proto.dataprocessing.AccountDailySnapshot>}
 */
proto.dataprocessing.GetAccountDailySnapshotsResponse.prototype.getAccountDailySnapshotsList = function() {
  return /** @type{!Array<!proto.dataprocessing.AccountDailySnapshot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dataprocessing.AccountDailySnapshot, 1));
};


/**
 * @param {!Array<!proto.dataprocessing.AccountDailySnapshot>} value
 * @return {!proto.dataprocessing.GetAccountDailySnapshotsResponse} returns this
*/
proto.dataprocessing.GetAccountDailySnapshotsResponse.prototype.setAccountDailySnapshotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dataprocessing.AccountDailySnapshot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dataprocessing.AccountDailySnapshot}
 */
proto.dataprocessing.GetAccountDailySnapshotsResponse.prototype.addAccountDailySnapshots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dataprocessing.AccountDailySnapshot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dataprocessing.GetAccountDailySnapshotsResponse} returns this
 */
proto.dataprocessing.GetAccountDailySnapshotsResponse.prototype.clearAccountDailySnapshotsList = function() {
  return this.setAccountDailySnapshotsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataprocessing.GetAccountMonthlySnapshotsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dataprocessing.GetAccountMonthlySnapshotsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataprocessing.GetAccountMonthlySnapshotsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.GetAccountMonthlySnapshotsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataprocessing.GetAccountMonthlySnapshotsRequest}
 */
proto.dataprocessing.GetAccountMonthlySnapshotsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataprocessing.GetAccountMonthlySnapshotsRequest;
  return proto.dataprocessing.GetAccountMonthlySnapshotsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataprocessing.GetAccountMonthlySnapshotsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataprocessing.GetAccountMonthlySnapshotsRequest}
 */
proto.dataprocessing.GetAccountMonthlySnapshotsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setItemId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataprocessing.GetAccountMonthlySnapshotsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataprocessing.GetAccountMonthlySnapshotsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataprocessing.GetAccountMonthlySnapshotsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.GetAccountMonthlySnapshotsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 item_id = 1;
 * @return {number}
 */
proto.dataprocessing.GetAccountMonthlySnapshotsRequest.prototype.getItemId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.GetAccountMonthlySnapshotsRequest} returns this
 */
proto.dataprocessing.GetAccountMonthlySnapshotsRequest.prototype.setItemId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 account_id = 2;
 * @return {number}
 */
proto.dataprocessing.GetAccountMonthlySnapshotsRequest.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataprocessing.GetAccountMonthlySnapshotsRequest} returns this
 */
proto.dataprocessing.GetAccountMonthlySnapshotsRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dataprocessing.GetAccountMonthlySnapshotsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataprocessing.GetAccountMonthlySnapshotsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dataprocessing.GetAccountMonthlySnapshotsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataprocessing.GetAccountMonthlySnapshotsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.GetAccountMonthlySnapshotsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountMonthlySnapshotsList: jspb.Message.toObjectList(msg.getAccountMonthlySnapshotsList(),
    proto.dataprocessing.AccountMonthlySnapshot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataprocessing.GetAccountMonthlySnapshotsResponse}
 */
proto.dataprocessing.GetAccountMonthlySnapshotsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataprocessing.GetAccountMonthlySnapshotsResponse;
  return proto.dataprocessing.GetAccountMonthlySnapshotsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataprocessing.GetAccountMonthlySnapshotsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataprocessing.GetAccountMonthlySnapshotsResponse}
 */
proto.dataprocessing.GetAccountMonthlySnapshotsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dataprocessing.AccountMonthlySnapshot;
      reader.readMessage(value,proto.dataprocessing.AccountMonthlySnapshot.deserializeBinaryFromReader);
      msg.addAccountMonthlySnapshots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataprocessing.GetAccountMonthlySnapshotsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataprocessing.GetAccountMonthlySnapshotsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataprocessing.GetAccountMonthlySnapshotsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.GetAccountMonthlySnapshotsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountMonthlySnapshotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dataprocessing.AccountMonthlySnapshot.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccountMonthlySnapshot account_monthly_snapshots = 1;
 * @return {!Array<!proto.dataprocessing.AccountMonthlySnapshot>}
 */
proto.dataprocessing.GetAccountMonthlySnapshotsResponse.prototype.getAccountMonthlySnapshotsList = function() {
  return /** @type{!Array<!proto.dataprocessing.AccountMonthlySnapshot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dataprocessing.AccountMonthlySnapshot, 1));
};


/**
 * @param {!Array<!proto.dataprocessing.AccountMonthlySnapshot>} value
 * @return {!proto.dataprocessing.GetAccountMonthlySnapshotsResponse} returns this
*/
proto.dataprocessing.GetAccountMonthlySnapshotsResponse.prototype.setAccountMonthlySnapshotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dataprocessing.AccountMonthlySnapshot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dataprocessing.AccountMonthlySnapshot}
 */
proto.dataprocessing.GetAccountMonthlySnapshotsResponse.prototype.addAccountMonthlySnapshots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dataprocessing.AccountMonthlySnapshot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dataprocessing.GetAccountMonthlySnapshotsResponse} returns this
 */
proto.dataprocessing.GetAccountMonthlySnapshotsResponse.prototype.clearAccountMonthlySnapshotsList = function() {
  return this.setAccountMonthlySnapshotsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataprocessing.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.dataprocessing.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataprocessing.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataprocessing.Empty}
 */
proto.dataprocessing.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataprocessing.Empty;
  return proto.dataprocessing.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataprocessing.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataprocessing.Empty}
 */
proto.dataprocessing.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataprocessing.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataprocessing.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataprocessing.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataprocessing.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.dataprocessing);
