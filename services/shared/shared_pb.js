// source: services/shared/shared.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.shared.FinancialAccount', null, global);
goog.exportSymbol('proto.shared.FinancialInstitution', null, global);
goog.exportSymbol('proto.shared.FinancialTransaction', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shared.FinancialAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shared.FinancialAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shared.FinancialAccount.displayName = 'proto.shared.FinancialAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shared.FinancialInstitution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shared.FinancialInstitution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shared.FinancialInstitution.displayName = 'proto.shared.FinancialInstitution';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shared.FinancialTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shared.FinancialTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shared.FinancialTransaction.displayName = 'proto.shared.FinancialTransaction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shared.FinancialAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.shared.FinancialAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shared.FinancialAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shared.FinancialAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    itemId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    plaidAccountId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    currentBalance: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    availableBalance: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    accountName: jspb.Message.getFieldWithDefault(msg, 7, ""),
    officialName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    accountType: jspb.Message.getFieldWithDefault(msg, 9, ""),
    accountSubtype: jspb.Message.getFieldWithDefault(msg, 10, ""),
    accountMask: jspb.Message.getFieldWithDefault(msg, 11, ""),
    selected: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shared.FinancialAccount}
 */
proto.shared.FinancialAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shared.FinancialAccount;
  return proto.shared.FinancialAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shared.FinancialAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shared.FinancialAccount}
 */
proto.shared.FinancialAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setItemId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaidAccountId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentBalance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAvailableBalance(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOfficialName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountType(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountSubtype(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountMask(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shared.FinancialAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shared.FinancialAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shared.FinancialAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shared.FinancialAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getItemId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPlaidAccountId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCurrentBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getAvailableBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getAccountName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOfficialName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAccountType();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAccountSubtype();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getAccountMask();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSelected();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.shared.FinancialAccount.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialAccount} returns this
 */
proto.shared.FinancialAccount.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 user_id = 2;
 * @return {number}
 */
proto.shared.FinancialAccount.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialAccount} returns this
 */
proto.shared.FinancialAccount.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 item_id = 3;
 * @return {number}
 */
proto.shared.FinancialAccount.prototype.getItemId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialAccount} returns this
 */
proto.shared.FinancialAccount.prototype.setItemId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string plaid_account_id = 4;
 * @return {string}
 */
proto.shared.FinancialAccount.prototype.getPlaidAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialAccount} returns this
 */
proto.shared.FinancialAccount.prototype.setPlaidAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double current_balance = 5;
 * @return {number}
 */
proto.shared.FinancialAccount.prototype.getCurrentBalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialAccount} returns this
 */
proto.shared.FinancialAccount.prototype.setCurrentBalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double available_balance = 6;
 * @return {number}
 */
proto.shared.FinancialAccount.prototype.getAvailableBalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialAccount} returns this
 */
proto.shared.FinancialAccount.prototype.setAvailableBalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string account_name = 7;
 * @return {string}
 */
proto.shared.FinancialAccount.prototype.getAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialAccount} returns this
 */
proto.shared.FinancialAccount.prototype.setAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string official_name = 8;
 * @return {string}
 */
proto.shared.FinancialAccount.prototype.getOfficialName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialAccount} returns this
 */
proto.shared.FinancialAccount.prototype.setOfficialName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string account_type = 9;
 * @return {string}
 */
proto.shared.FinancialAccount.prototype.getAccountType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialAccount} returns this
 */
proto.shared.FinancialAccount.prototype.setAccountType = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string account_subtype = 10;
 * @return {string}
 */
proto.shared.FinancialAccount.prototype.getAccountSubtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialAccount} returns this
 */
proto.shared.FinancialAccount.prototype.setAccountSubtype = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string account_mask = 11;
 * @return {string}
 */
proto.shared.FinancialAccount.prototype.getAccountMask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialAccount} returns this
 */
proto.shared.FinancialAccount.prototype.setAccountMask = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool selected = 12;
 * @return {boolean}
 */
proto.shared.FinancialAccount.prototype.getSelected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.shared.FinancialAccount} returns this
 */
proto.shared.FinancialAccount.prototype.setSelected = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shared.FinancialInstitution.prototype.toObject = function(opt_includeInstance) {
  return proto.shared.FinancialInstitution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shared.FinancialInstitution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shared.FinancialInstitution.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    institutionName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    institutionColor: jspb.Message.getFieldWithDefault(msg, 4, ""),
    institutionLogo: jspb.Message.getFieldWithDefault(msg, 5, ""),
    errorCode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    errorDevMsg: jspb.Message.getFieldWithDefault(msg, 7, ""),
    errorUserMsg: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shared.FinancialInstitution}
 */
proto.shared.FinancialInstitution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shared.FinancialInstitution;
  return proto.shared.FinancialInstitution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shared.FinancialInstitution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shared.FinancialInstitution}
 */
proto.shared.FinancialInstitution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstitutionName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstitutionColor(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstitutionLogo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorCode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDevMsg(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorUserMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shared.FinancialInstitution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shared.FinancialInstitution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shared.FinancialInstitution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shared.FinancialInstitution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getInstitutionName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInstitutionColor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInstitutionLogo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getErrorCode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getErrorDevMsg();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getErrorUserMsg();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.shared.FinancialInstitution.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialInstitution} returns this
 */
proto.shared.FinancialInstitution.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 user_id = 2;
 * @return {number}
 */
proto.shared.FinancialInstitution.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialInstitution} returns this
 */
proto.shared.FinancialInstitution.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string institution_name = 3;
 * @return {string}
 */
proto.shared.FinancialInstitution.prototype.getInstitutionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialInstitution} returns this
 */
proto.shared.FinancialInstitution.prototype.setInstitutionName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string institution_color = 4;
 * @return {string}
 */
proto.shared.FinancialInstitution.prototype.getInstitutionColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialInstitution} returns this
 */
proto.shared.FinancialInstitution.prototype.setInstitutionColor = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string institution_logo = 5;
 * @return {string}
 */
proto.shared.FinancialInstitution.prototype.getInstitutionLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialInstitution} returns this
 */
proto.shared.FinancialInstitution.prototype.setInstitutionLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string error_code = 6;
 * @return {string}
 */
proto.shared.FinancialInstitution.prototype.getErrorCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialInstitution} returns this
 */
proto.shared.FinancialInstitution.prototype.setErrorCode = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string error_dev_msg = 7;
 * @return {string}
 */
proto.shared.FinancialInstitution.prototype.getErrorDevMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialInstitution} returns this
 */
proto.shared.FinancialInstitution.prototype.setErrorDevMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string error_user_msg = 8;
 * @return {string}
 */
proto.shared.FinancialInstitution.prototype.getErrorUserMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialInstitution} returns this
 */
proto.shared.FinancialInstitution.prototype.setErrorUserMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shared.FinancialTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.shared.FinancialTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shared.FinancialTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shared.FinancialTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    itemId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    accountId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    categoryId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    plaidAccountId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    plaidCategoryId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    plaidTransactionId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    name: jspb.Message.getFieldWithDefault(msg, 9, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    date: jspb.Message.getFieldWithDefault(msg, 11, ""),
    pending: jspb.Message.getBooleanFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shared.FinancialTransaction}
 */
proto.shared.FinancialTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shared.FinancialTransaction;
  return proto.shared.FinancialTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shared.FinancialTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shared.FinancialTransaction}
 */
proto.shared.FinancialTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setItemId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCategoryId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaidAccountId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaidCategoryId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaidTransactionId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPending(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shared.FinancialTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shared.FinancialTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shared.FinancialTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shared.FinancialTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getItemId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCategoryId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getPlaidAccountId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPlaidCategoryId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPlaidTransactionId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPending();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.shared.FinancialTransaction.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialTransaction} returns this
 */
proto.shared.FinancialTransaction.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 user_id = 2;
 * @return {number}
 */
proto.shared.FinancialTransaction.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialTransaction} returns this
 */
proto.shared.FinancialTransaction.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 item_id = 3;
 * @return {number}
 */
proto.shared.FinancialTransaction.prototype.getItemId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialTransaction} returns this
 */
proto.shared.FinancialTransaction.prototype.setItemId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 account_id = 4;
 * @return {number}
 */
proto.shared.FinancialTransaction.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialTransaction} returns this
 */
proto.shared.FinancialTransaction.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 category_id = 5;
 * @return {number}
 */
proto.shared.FinancialTransaction.prototype.getCategoryId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialTransaction} returns this
 */
proto.shared.FinancialTransaction.prototype.setCategoryId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string plaid_account_id = 6;
 * @return {string}
 */
proto.shared.FinancialTransaction.prototype.getPlaidAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialTransaction} returns this
 */
proto.shared.FinancialTransaction.prototype.setPlaidAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string plaid_category_id = 7;
 * @return {string}
 */
proto.shared.FinancialTransaction.prototype.getPlaidCategoryId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialTransaction} returns this
 */
proto.shared.FinancialTransaction.prototype.setPlaidCategoryId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string plaid_transaction_id = 8;
 * @return {string}
 */
proto.shared.FinancialTransaction.prototype.getPlaidTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialTransaction} returns this
 */
proto.shared.FinancialTransaction.prototype.setPlaidTransactionId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string name = 9;
 * @return {string}
 */
proto.shared.FinancialTransaction.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialTransaction} returns this
 */
proto.shared.FinancialTransaction.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional double amount = 10;
 * @return {number}
 */
proto.shared.FinancialTransaction.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.shared.FinancialTransaction} returns this
 */
proto.shared.FinancialTransaction.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional string date = 11;
 * @return {string}
 */
proto.shared.FinancialTransaction.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.shared.FinancialTransaction} returns this
 */
proto.shared.FinancialTransaction.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool pending = 12;
 * @return {boolean}
 */
proto.shared.FinancialTransaction.prototype.getPending = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.shared.FinancialTransaction} returns this
 */
proto.shared.FinancialTransaction.prototype.setPending = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


goog.object.extend(exports, proto.shared);
